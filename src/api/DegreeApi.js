/**
 * Swagger Unicast
 * Documento de la API de Unicast
 *
 * OpenAPI spec version: 1.0.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Degree from '../model/Degree';
import DegreeGetEmbedded from '../model/DegreeGetEmbedded';
import DegreeGetResponse from '../model/DegreeGetResponse';

/**
* Degree service.
* @module api/DegreeApi
* @version 1.0.8
*/
export default class DegreeApi {

    /**
    * Constructs a new DegreeApi. 
    * @alias module:api/DegreeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addDegree operation.
     * @callback module:api/DegreeApi~addDegreeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Degree} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Crear nueva carrera
     * @param {module:model/Degree} degree Carrera a añadir
     * @param {module:api/DegreeApi~addDegreeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Degree}
     */
    addDegree(degree, callback) {
      let postBody = degree;
      // verify the required parameter 'degree' is set
      if (degree === undefined || degree === null) {
        throw new Error("Missing the required parameter 'degree' when calling addDegree");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/hal+json'];
      let returnType = Degree;
      return this.apiClient.callApi(
        '/degrees', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findDegreeStartsWith operation.
     * @callback module:api/DegreeApi~findDegreeStartsWithCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DegreeGetEmbedded} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Busca carreras que empiecen por el nombre dado
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Comienzo del nombre de la carrera a buscar
     * @param {module:api/DegreeApi~findDegreeStartsWithCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DegreeGetEmbedded}
     */
    findDegreeStartsWith(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DegreeGetEmbedded;
      return this.apiClient.callApi(
        '/degrees/search/nameStartsWith', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDegrees operation.
     * @callback module:api/DegreeApi~getDegreesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DegreeGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lista de carreras
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Numero de la página a devolver
     * @param {module:api/DegreeApi~getDegreesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DegreeGetResponse}
     */
    getDegrees(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/hal+json'];
      let returnType = DegreeGetResponse;
      return this.apiClient.callApi(
        '/degrees', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDegree operation.
     * @callback module:api/DegreeApi~updateDegreeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Degree} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Actualizar una carrera
     * @param {Number} id Id de la carrera
     * @param {module:model/Degree} degree Contenido a editar
     * @param {module:api/DegreeApi~updateDegreeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Degree}
     */
    updateDegree(id, degree, callback) {
      let postBody = degree;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateDegree");
      }
      // verify the required parameter 'degree' is set
      if (degree === undefined || degree === null) {
        throw new Error("Missing the required parameter 'degree' when calling updateDegree");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/hal+json'];
      let returnType = Degree;
      return this.apiClient.callApi(
        '/degrees/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
