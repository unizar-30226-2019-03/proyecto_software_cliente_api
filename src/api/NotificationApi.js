/**
 * Swagger Unicast
 * Documento de la API de Unicast
 *
 * OpenAPI spec version: 1.3.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UserIsNotified2 from '../model/UserIsNotified2';
import UserIsNotifiedGetResponse2 from '../model/UserIsNotifiedGetResponse2';

/**
* Notification service.
* @module api/NotificationApi
* @version 1.3.10
*/
export default class NotificationApi {

    /**
    * Constructs a new NotificationApi. 
    * @alias module:api/NotificationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the checkNotification operation.
     * @callback module:api/NotificationApi~checkNotificationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserIsNotified2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Marca una notificacion como revisada
     * @param {Number} notificationId Id de la notificacion a marcar como revisada
     * @param {module:api/NotificationApi~checkNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserIsNotified2}
     */
    checkNotification(notificationId, callback) {
      let postBody = null;
      // verify the required parameter 'notificationId' is set
      if (notificationId === undefined || notificationId === null) {
        throw new Error("Missing the required parameter 'notificationId' when calling checkNotification");
      }

      let pathParams = {
      };
      let queryParams = {
        'notification_id': notificationId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserIsNotified2;
      return this.apiClient.callApi(
        '/usersAreNotified/check', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserNotifications operation.
     * @callback module:api/NotificationApi~getUserNotificationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserIsNotifiedGetResponse2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lista de notificaciones de un usuario, tanto revisadas como no revisadas
     * @param {Object} opts Optional parameters
     * @param {String} opts.cacheControl  (default to 'no-cache, no-store, must-revalidate')
     * @param {String} opts.pragma  (default to 'no-cache')
     * @param {String} opts.expires  (default to '0')
     * @param {Number} opts.page Número de la página a devolver
     * @param {module:api/NotificationApi~getUserNotificationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserIsNotifiedGetResponse2}
     */
    getUserNotifications(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page']
      };
      let headerParams = {
        'Cache-Control': opts['cacheControl'],
        'Pragma': opts['pragma'],
        'Expires': opts['expires']
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserIsNotifiedGetResponse2;
      return this.apiClient.callApi(
        '/usersAreNotified/search/userNotifications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserUncheckedNotifications operation.
     * @callback module:api/NotificationApi~getUserUncheckedNotificationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserIsNotifiedGetResponse2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lista de notificaciones que no han sido revisadas
     * @param {Object} opts Optional parameters
     * @param {String} opts.cacheControl  (default to 'no-cache, no-store, must-revalidate')
     * @param {String} opts.pragma  (default to 'no-cache')
     * @param {String} opts.expires  (default to '0')
     * @param {Number} opts.page Número de la página a devolver
     * @param {module:api/NotificationApi~getUserUncheckedNotificationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserIsNotifiedGetResponse2}
     */
    getUserUncheckedNotifications(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page']
      };
      let headerParams = {
        'Cache-Control': opts['cacheControl'],
        'Pragma': opts['pragma'],
        'Expires': opts['expires']
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserIsNotifiedGetResponse2;
      return this.apiClient.callApi(
        '/usersAreNotified/search/userUncheckedNotifications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
