/**
 * Swagger Unicast
 * Documento de la API de Unicast
 *
 * OpenAPI spec version: 1.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import University from '../model/University';
import UniversityGetResponse from '../model/UniversityGetResponse';
import UniversityWithLinks from '../model/UniversityWithLinks';

/**
* University service.
* @module api/UniversityApi
* @version 1.0.5
*/
export default class UniversityApi {

    /**
    * Constructs a new UniversityApi. 
    * @alias module:api/UniversityApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addUniversity operation.
     * @callback module:api/UniversityApi~addUniversityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UniversityWithLinks} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Crear nueva universidad
     * @param {module:model/University} university Universidad a añadir
     * @param {module:api/UniversityApi~addUniversityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UniversityWithLinks}
     */
    addUniversity(university, callback) {
      let postBody = university;
      // verify the required parameter 'university' is set
      if (university === undefined || university === null) {
        throw new Error("Missing the required parameter 'university' when calling addUniversity");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/hal+json'];
      let returnType = UniversityWithLinks;
      return this.apiClient.callApi(
        '/universities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniversities operation.
     * @callback module:api/UniversityApi~getUniversitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UniversityGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lista de universidades
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Numero de la página a devolver
     * @param {module:api/UniversityApi~getUniversitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UniversityGetResponse}
     */
    getUniversities(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/hal+json'];
      let returnType = UniversityGetResponse;
      return this.apiClient.callApi(
        '/universities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUniversity operation.
     * @callback module:api/UniversityApi~updateUniversityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UniversityWithLinks} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Actualizar una universidad
     * @param {Number} id Id de la universidad
     * @param {module:model/University} university Contenido a editar
     * @param {module:api/UniversityApi~updateUniversityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UniversityWithLinks}
     */
    updateUniversity(id, university, callback) {
      let postBody = university;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateUniversity");
      }
      // verify the required parameter 'university' is set
      if (university === undefined || university === null) {
        throw new Error("Missing the required parameter 'university' when calling updateUniversity");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/hal+json'];
      let returnType = UniversityWithLinks;
      return this.apiClient.callApi(
        '/universities/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
