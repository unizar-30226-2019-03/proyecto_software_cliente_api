/**
 * Swagger Unicast
 * Documento de la API de Unicast
 *
 * OpenAPI spec version: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Subject from './Subject';
import University from './University';

/**
 * The SubjectWithUniversity model module.
 * @module model/SubjectWithUniversity
 * @version 1.2.0
 */
class SubjectWithUniversity {
    /**
     * Constructs a new <code>SubjectWithUniversity</code>.
     * @alias module:model/SubjectWithUniversity
     * @extends module:model/Subject
     * @implements module:model/Subject
     * @param name {String} 
     * @param abbreviation {String} 
     * @param name {String} 
     * @param abbreviation {String} 
     */
    constructor(name, abbreviation, name, abbreviation) { 
        Subject.initialize(this, name, abbreviation);
        SubjectWithUniversity.initialize(this, name, abbreviation, name, abbreviation);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, abbreviation, name, abbreviation) { 
    }

    /**
     * Constructs a <code>SubjectWithUniversity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubjectWithUniversity} obj Optional instance to populate.
     * @return {module:model/SubjectWithUniversity} The populated <code>SubjectWithUniversity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubjectWithUniversity();
            Subject.constructFromObject(data, obj);
            Subject.constructFromObject(data, obj);

            if (data.hasOwnProperty('university')) {
                obj['university'] = University.constructFromObject(data['university']);
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/University} university
 */
SubjectWithUniversity.prototype['university'] = undefined;


// Implement Subject interface:
/**
 * @member {Number} id
 */
Subject.prototype['id'] = undefined;
/**
 * @member {String} name
 */
Subject.prototype['name'] = undefined;
/**
 * @member {String} abbreviation
 */
Subject.prototype['abbreviation'] = undefined;




export default SubjectWithUniversity;

