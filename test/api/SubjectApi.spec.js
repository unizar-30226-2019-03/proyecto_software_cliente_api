/**
 * Swagger Unicast
 * Documento de la API de Unicast
 *
 * OpenAPI spec version: 1.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SwaggerUnicast);
  }
}(this, function(expect, SwaggerUnicast) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SwaggerUnicast.SubjectApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SubjectApi', function() {
    describe('addProfessor', function() {
      it('should call addProfessor successfully', function(done) {
        //uncomment below and update the code to test addProfessor
        //instance.addProfessor(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addSubject', function() {
      it('should call addSubject successfully', function(done) {
        //uncomment below and update the code to test addSubject
        //instance.addSubject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteProfessor', function() {
      it('should call deleteProfessor successfully', function(done) {
        //uncomment below and update the code to test deleteProfessor
        //instance.deleteProfessor(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSubject', function() {
      it('should call deleteSubject successfully', function(done) {
        //uncomment below and update the code to test deleteSubject
        //instance.deleteSubject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('existsUserInSubject', function() {
      it('should call existsUserInSubject successfully', function(done) {
        //uncomment below and update the code to test existsUserInSubject
        //instance.existsUserInSubject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findSubjectsByName', function() {
      it('should call findSubjectsByName successfully', function(done) {
        //uncomment below and update the code to test findSubjectsByName
        //instance.findSubjectsByName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findSubjectsContainingName', function() {
      it('should call findSubjectsContainingName successfully', function(done) {
        //uncomment below and update the code to test findSubjectsContainingName
        //instance.findSubjectsContainingName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findSubjectsStartsWithName', function() {
      it('should call findSubjectsStartsWithName successfully', function(done) {
        //uncomment below and update the code to test findSubjectsStartsWithName
        //instance.findSubjectsStartsWithName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('followSubject', function() {
      it('should call followSubject successfully', function(done) {
        //uncomment below and update the code to test followSubject
        //instance.followSubject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProfessorsFromSubject', function() {
      it('should call getProfessorsFromSubject successfully', function(done) {
        //uncomment below and update the code to test getProfessorsFromSubject
        //instance.getProfessorsFromSubject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSubjectRanking', function() {
      it('should call getSubjectRanking successfully', function(done) {
        //uncomment below and update the code to test getSubjectRanking
        //instance.getSubjectRanking(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSubjects', function() {
      it('should call getSubjects successfully', function(done) {
        //uncomment below and update the code to test getSubjects
        //instance.getSubjects(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putUniversity', function() {
      it('should call putUniversity successfully', function(done) {
        //uncomment below and update the code to test putUniversity
        //instance.putUniversity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unfollowSubject', function() {
      it('should call unfollowSubject successfully', function(done) {
        //uncomment below and update the code to test unfollowSubject
        //instance.unfollowSubject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSubject', function() {
      it('should call updateSubject successfully', function(done) {
        //uncomment below and update the code to test updateSubject
        //instance.updateSubject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
